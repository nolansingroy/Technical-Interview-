Question 1: 
Here we are checking whether some anagram of 't' is a substring of 's'
by compiling a dictionary of alphabet counts for 't' and check with every possible consecutive substring sets in 's'.I am using a dictionary variable
to store the counts of alphabets in 't'. Our time effciency, if we
assume n is equal to length of 's' then worst case would be O(n), average case: O(n/2) and our space effeciency:O(1).
-----------------------------------------------------------------------------

Question 2:

The worst case for this palindrome will be O(n). 
If we were to check for all possible combinations the time complexity will be
O(n^2). The space complexity is O(1) since we only had to store left and right 
indexes of the longest palindrome string.

----------------------------------------------------------------------------
Question 3: 


The function builds the list by iterating over the vertices.
Next, the function finds the shortest length by sorting 
by weight. Finally the vertices are recompiled into the edge list in order of
least edge weight to most. Here the overall efficency would be O(2n+ V), 
where the number '2' is the function iterating the edges twice
the variable n = edges and the variable v = vertices. 
--------------------------------------------------------------------
Question 4

The technique being used is to 
	1. find the list of parents of the first elements that were checked
	2. then store them in a list 
		while checking whether a parent of the second element can be found in the stored list
Storing the parents using a list of type integer
The time efficency: 
	Where there are n elements in the BST While searching through
	the adjacency matrix.
	Worst Case: O(n^2)
	Average Case: O(n^2/2)
Space Effeciency: O(n/2)

-----------------------------------------------------------------
Question 5

Using two pointer to advance through a linked list, with
the previous pointer resting at the mth ndoe from the end.
The Alorthim:
	# so the distance between the end pointer and 
          mid pointer is equivilent to the distance between the mth node
          and the end of list +1.

	1. advance a 11 end tracker to node m -1 of the list

         # maintaining the distance, mid point lives at end of list
           from mth node

	2. then advance two pointers through the list until 
           the end pointer is set to None or the end node +1

	3. Mid pointer data is returned

Time Effeciency: O(n), always iterate thrpugh every element of the LL.
Space Effeciency: O(1), only two variables are declared no matter the size of
			of the linked list. 



